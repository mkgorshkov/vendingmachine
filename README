# Vending Machine
Thank you for a wonderful challenge related to designing a vending
machine, please find attached the documentation related to design
decisions. More specific choices are commented throughout the application.

## Front End
One of the most influential libraries for front-end javaScript frameworks
is react. Since it is advertised as a framework for UIs, this was a logical
choice for the vending machine interface.

## Back End
We want a decoupled system which can sit in front of many different types of 
vending machines. To accommodate this separation, I've exposed REST-API endpoints
which allow the user, through the interface to interact with the underlying data. There were
a few ways to implement this challenge - have the state, items, etc live on the vending
machine itself (at the REST-API) level or have the data stored in the database and be
accessible through the API.

For the sake of scalability, I've taken all of the 
data out into the database and left only the required operational logic in the API. This
allows us to add n-vending machines with n-items. This also allows the system to gracefully
recover from a restart/power off situation. 

### Database Structure
A vending machine has a unique ID which is used to identify how much it has in the register (how many coins of each type)
and what the inventory of the machine looks like. Since the same product ex. bag of chips can be the 
same across different machines, products and inventory are separate tables. Furthermore, the price 
is determined on a machine-by-machine basis since pricing may vary on location for the same product.
